QUESTAO 1:
#include <stdio.h>

int main() {
    int vetor[10] = {0,1,2,3,4,5,6,7,8,9};
    int i = 0;
    int temp;

    while (i < 10) {
        temp = vetor[i];
        vetor[i] = vetor[9 - i];
        vetor[9 - i] = temp;
        i = i + 1;
    }
printf("Vetor invertido: ");
    for (int j = 0; j < 10; j++) {
        printf("%d ", vetor[j]);
    }
    printf("\n");

    return 0;
}

QUESTÃO 2:
#include <stdio.h>
int estaOrdenado(int vetor[], int tamanho) {
    for (int i = 0; i < tamanho - 1; i++) {
        if (vetor[i] > vetor[i + 1]) {
            return 0; 
        }
    }
    return 1; 
}
int main() {
    int N;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &N);

    if (N <= 0) {
        printf("Tamanho do vetor inválido.\n");
        return 1;
    }

    int vetor[N];

    printf("Digite os elementos do vetor:\n");
    for (int i = 0; i < N; i++) {
        scanf("%d", &vetor[i]);
    }

    if (estaOrdenado(vetor, N)) {
        printf("SIM\n");
    } else {
        printf("NAO\n");
    }

    return 0;
}

QUESTÃO 3:

#include <stdio.h>

int main() {
    char tabuleiro[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
    char jogador = 'X';
    int linha, coluna;

    printf("Jogo da Velha!\n");

    while (1) {
        printf("\nJogador %c, digite a linha (1-3) e coluna (1-3): ", jogador);
        scanf("%d %d", &linha, &coluna);

        if (tabuleiro[linha - 1][coluna - 1] != ' ' || linha < 1 || linha > 3 || coluna < 1 || coluna > 3) {
            printf("Posicao invalida. Tente novamente.\n");
            continue;
        }

        tabuleiro[linha - 1][coluna - 1] = jogador;

        printf("\n  1 2 3\n");
        for (int i = 0; i < 3; i++) {
            printf("%d %c|%c|%c\n", i + 1, tabuleiro[i][0], tabuleiro[i][1], tabuleiro[i][2]);
            if (i < 2) printf("  -----\n");
        }
int vitoria = ((tabuleiro[0][0] == jogador && tabuleiro[0][1] == jogador && tabuleiro[0][2] == jogador) ||
                      (tabuleiro[1][0] == jogador && tabuleiro[1][1] == jogador && tabuleiro[1][2] == jogador) ||
                      (tabuleiro[2][0] == jogador && tabuleiro[2][1] == jogador && tabuleiro[2][2] == jogador) ||
                      (tabuleiro[0][0] == jogador && tabuleiro[1][0] == jogador && tabuleiro[2][0] == jogador) ||
                      (tabuleiro[0][1] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][1] == jogador) ||
                      (tabuleiro[0][2] == jogador && tabuleiro[1][2] == jogador && tabuleiro[2][2] == jogador) ||
                      (tabuleiro[0][0] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][2] == jogador) ||
                      (tabuleiro[0][2] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][0] == jogador));
        int empate = 1;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tabuleiro[i][j] == ' ') {
                    empate = 0;
                    break;
                }
            }
            if (!empate) break;
        }

        if (vitoria) {
            printf("\nJogador %c venceu!\n", jogador);
            break;
        } else if (empate) {
            printf("\nEmpate!\n");
            break;
        }

        jogador = (jogador == 'X') ? 'O' : 'X'; 
    }

    return 0;
}

QUESTÃO 4:
#include <stdio.h>

int main() {
    int matriz[10][10];
    int maiorValor = matriz[0][0], linhaMaior, colunaMaior;

    printf("Digite os elementos da matriz 10x10:\n");
 for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            scanf("%d", &matriz[i][j]);
 if (matriz[i][j] > maiorValor) {
                maiorValor = matriz[i][j];
                linhaMaior = i;
                colunaMaior = j;
            }
        }
    }

    printf("O maior valor encontrado na matriz é %d, na linha %d e coluna %d.\n", maiorValor, linhaMaior + 1, colunaMaior + 1);

    return 0;
}

QUESTÃO 5:
#include <stdio.h>
struct Banda {
    char nome[50];
    char tipoMusica[50];
    int numeroIntegrantes;
    int posicaoRanking;
};

int main() {
    struct Banda minhaBanda;

    printf("Digite o nome da banda: ");
    scanf("%s", minhaBanda.nome);

    printf("Digite o tipo de música da banda: ");
    scanf("%s", minhaBanda.tipoMusica);

    printf("Digite o número de integrantes da banda: ");
    scanf("%d", &minhaBanda.numeroIntegrantes);

    printf("Digite a posição da banda no ranking (1-5): ");
    scanf("%d", &minhaBanda.posicaoRanking);

    printf("\nInformacoes da banda:\n");
    printf("Nome: %s\n", minhaBanda.nome);
    printf("Tipo de música: %s\n", minhaBanda.tipoMusica);
    printf("Número de integrantes: %d\n", minhaBanda.numeroIntegrantes);
    printf("Posição no ranking: %d\n", minhaBanda.posicaoRanking);

    return 0;
}
QUESTÃO 6:
Uma estrutura de dados adequada para gerenciar a ordem de execução de processos e threads em um sistema operacional é uma fila de prioridade. Uma fila de prioridade é uma estrutura de dados na qual cada elemento possui uma prioridade associada. Os elementos são organizados na fila de acordo com suas prioridades, de modo que os elementos com maior prioridade são processados primeiro.
Existem diferentes implementações de filas de prioridade, sendo uma das mais comuns a fila de prioridade binária, que utiliza uma árvore binária para representar a fila. Nessa estrutura, o elemento com maior prioridade é sempre o primeiro a ser removido da fila. Além disso, as operações de inserção e remoção de elementos mantêm a ordem de prioridade da fila.
A utilização de uma fila de prioridade permite que o sistema operacional gerencie eficientemente a execução de processos e threads, garantindo que os processos com maior prioridade sejam executados antes dos processos com menor prioridade, o que contribui para um melhor desempenho e eficiência do sistema.

QUESTAO 7:
Uma estrutura de dados adequada para implementar a funcionalidade de desfazer e refazer a última ação tomada é a pilha, mais especificamente duas pilhas, uma para desfazer (undo) e outra para refazer (redo).
Uma pilha é uma estrutura de dados linear que segue o princípio LIFO (Last In, First Out), ou seja, o último elemento inserido é o primeiro a ser removido. Ela oferece operações eficientes de inserção e remoção no topo da pilha.
Ao realizar uma ação que pode ser desfeita, os dados dessa ação são empilhados na pilha de desfazer. Se o usuário optar por desfazer essa ação, os dados são removidos da pilha de desfazer e podem ser aplicados (revertidos) à estrutura de dados original. Se o usuário desejar refazer a ação, os dados podem ser empilhados na pilha de refazer e posteriormente aplicados à estrutura de dados original.
Portanto, usando duas pilhas, é possível implementar uma funcionalidade eficiente de desfazer e refazer ações, garantindo que as operações sejam executadas na ordem correta, seguindo o princípio LIFO. Isso permite uma manipulação eficiente do histórico de ações do usuário.

QUESTÃO 8:
#include <stdio.h>
void trocarValores(int *ptrVar1, int *ptrVar2) {
    int temp = *ptrVar1;
    *ptrVar1 = *ptrVar2;
    *ptrVar2 = temp;
}

int main() {
    int var1 = 10;
    int var2 = 20;

    printf("Antes da troca:\n");
    printf("var1 = %d\n", var1);
    printf("var2 = %d\n", var2);

trocarValores(&var1, &var2);

    printf("\nDepois da troca:\n");
    printf("var1 = %d\n", var1);
    printf("var2 = %d\n", var2);

    return 0;
}

